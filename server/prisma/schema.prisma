// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Users {
  userId String  @id
  name   String
  phone  String? // telefone opcional
  Sales  Sales[] // vendas associadas ao usuário (cliente)
}

model Products {
  productId       String     @id
  name            String
  price           Float
  stockQuantity   Int
  imageProductUrl String?
  dueDate         DateTime
  categoryId      String
  brandId         String
  Sales           Sales[]    // vendas relacionadas ao produto
  Purchases       Purchases[]// compras relacionadas ao produto
  
  category        Category   @relation(fields: [categoryId], references: [categoryId])
  brand           Brand      @relation(fields: [brandId], references: [brandId])
}

model Category {
  categoryId String   @id
  name       String
  Products   Products[] // Produtos que pertencem a esta categoria
}

model Brand {
  brandId   String   @id
  name      String
  Products  Products[] // Produtos que pertencem a esta marca
}

model Sales {
  saleId      String   @id
  productId   String
  userId      String
  timestamp   DateTime
  quantity    Int
  unitPrice   Float
  totalAmount Float
  product     Products @relation(fields: [productId], references: [productId])
  user        Users    @relation(fields: [userId], references: [userId]) // Relacionamento com o usuário (cliente)
}

model Purchases {
  purchaseId String   @id
  productId  String
  timestamp  DateTime
  quantity   Int
  unitCost   Float
  totalCost  Float
  product    Products @relation(fields: [productId], references: [productId])
}

model Expenses {
  expenseId String   @id
  category  String
  amount    Float
  timestamp DateTime
}

model SalesSummary {
  salesSummaryId   String   @id
  totalValue       Float
  changePercentage Float?
  date             DateTime
}

model PurchaseSummary {
  purchaseSummaryId String   @id
  totalPurchased    Float
  changePercentage  Float?
  date              DateTime
}

model ExpenseSummary {
  expenseSummaryId  String              @id
  totalExpenses     Float
  date              DateTime
  ExpenseByCategory ExpenseByCategory[]
}

model ExpenseByCategory {
  expenseByCategoryId String         @id
  expenseSummaryId    String
  category            String
  amount              BigInt
  date                DateTime
  expenseSummary      ExpenseSummary @relation(fields: [expenseSummaryId], references: [expenseSummaryId])
}
